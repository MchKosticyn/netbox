# Generated by Django 5.0.9 on 2025-02-20 16:49

import sys
import time

import django.db.models.deletion
from django.db import migrations, models


def draw_progress(count, total, length=20):
    progress = count / total
    percent = int(progress * 100)
    bar = int(progress * length)
    sys.stdout.write('\r')
    sys.stdout.write(f"[{'=' * bar:{length}s}] {percent}%")
    sys.stdout.flush()


def set_ipaddress_prefix(apps, schema_editor):
    start = time.time()
    IPAddress = apps.get_model('ipam', 'IPAddress')
    Prefix = apps.get_model('ipam', 'Prefix')

    addresses = IPAddress.objects.all()
    i = 0
    total = addresses.count()
    if total > 0:
        print('\r\n')
    draw_progress(i, total, 50)
    for address in addresses:
        i += 1
        prefixes = Prefix.objects.filter(
            vrf=address.vrf,
            prefix__net_contains_or_equals=str(address.address.ip),
            prefix__net_mask_length__lte=address.address.prefixlen,
        )
        address.prefix = prefixes.last()
        address.save()
        draw_progress(i, total, 50)

    end = time.time()
    print(f"\r\nElapsed Time: {end - start:.2f}s")


def unset_ipaddress_prefix(apps, schema_editor):
    IPAddress = apps.get_model('ipam', 'IPAddress')
    IPAddress.objects.update(prefix=None)


def set_iprange_prefix(apps, schema_editor):
    IPRange = apps.get_model('ipam', 'IPRange')
    Prefix = apps.get_model('ipam', 'Prefix')
    start = time.time()

    addresses = IPRange.objects.all()
    i = 0
    total = addresses.count()
    if total > 0:
        print('\r\n')
    draw_progress(i, total, 50)
    for address in addresses:
        i += 1
        prefixes = Prefix.objects.filter(
            vrf=address.vrf,
            prefix__net_contains_or_equals=str(address.start_address.ip),
            prefix__net_mask_length__lte=address.start_address.prefixlen,
        )
        address.prefix = prefixes.last()
        address.save()
        draw_progress(i, total, 50)

    end = time.time()
    print(f"\r\nElapsed Time: {end - start:.2f}s")


def unset_iprange_prefix(apps, schema_editor):
    IPRange = apps.get_model('ipam', 'IPRange')
    IPRange.objects.update(prefix=None)


def set_prefix_aggregate(apps, schema_editor):
    Prefix = apps.get_model('ipam', 'Prefix')
    Aggregate = apps.get_model('ipam', 'Aggregate')

    start = time.time()
    addresses = Prefix.objects.all()
    i = 0
    total = addresses.count()
    if total > 0:
        print('\r\n')
    draw_progress(i, total, 50)
    for address in addresses:
        i += 1
        aggregates = Aggregate.objects.filter(
            prefix__net_contains_or_equals=str(address.prefix.ip),
            prefix__net_mask_length__lte=address.prefix.prefixlen,
        )
        address.aggregate = aggregates.last()
        address.save()
        draw_progress(i, total, 50)

    end = time.time()
    print(f"\r\nElapsed Time: {end - start:.2f}s")


def unset_prefix_aggregate(apps, schema_editor):
    Prefix = apps.get_model('ipam', 'Prefix')
    Prefix.objects.update(aggregate=None)


class Migration(migrations.Migration):

    dependencies = [
        ('ipam', '0081_remove_service_device_virtual_machine_add_parent_gfk_index'),
    ]

    operations = [
        migrations.AddField(
            model_name='ipaddress',
            name='prefix',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name='ip_addresses',
                to='ipam.prefix',
            ),
        ),
        migrations.AddField(
            model_name='iprange',
            name='prefix',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='ip_ranges',
                to='ipam.prefix',
            ),
        ),
        migrations.AddField(
            model_name='prefix',
            name='aggregate',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='prefixes',
                to='ipam.aggregate',
            ),
        ),
        migrations.RunPython(set_ipaddress_prefix, unset_ipaddress_prefix),
        migrations.RunPython(set_iprange_prefix, unset_iprange_prefix),
        migrations.RunPython(set_prefix_aggregate, unset_prefix_aggregate),
    ]
